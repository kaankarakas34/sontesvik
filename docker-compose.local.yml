# =====================================================
# LOCAL DEVELOPMENT DOCKER COMPOSE CONFIGURATION
# =====================================================
# Bu dosya local development için optimize edilmiştir
# Kullanım: docker-compose -f docker-compose.local.yml up -d

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tesvik360_local_postgres
    environment:
      POSTGRES_DB: tesvik360_local
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tesvik360_local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tesvik360_local

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: tesvik360_local_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_local_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tesvik360_local

  # Backend API (Optional - if you want to run backend in Docker)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tesvik360_local_backend
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tesvik360_local
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5002:5002"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - tesvik360_local
    profiles:
      - full-stack  # Bu profil ile sadece gerektiğinde çalıştırılır

  # Frontend (Optional - if you want to run frontend in Docker)
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: tesvik360_local_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - tesvik360_local
    profiles:
      - full-stack  # Bu profil ile sadece gerektiğinde çalıştırılır

volumes:
  postgres_local_data:
    driver: local
  redis_local_data:
    driver: local

networks:
  tesvik360_local:
    driver: bridge
    name: tesvik360_local_network