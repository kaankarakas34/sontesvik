const { Sequelize } = require('sequelize');

// Sequelize instance
const sequelize = new Sequelize({
  dialect: 'postgres',
  host: '127.0.0.1',
  port: 5433,
  database: 'tesvik360_db',
  username: 'tesvik_admin',
  password: 'tesvik123',
  logging: false,
  define: {
    timestamps: true,
    underscored: true
  }
});

// Model'leri import et
const User = require('./backend/src/models/User')(sequelize, Sequelize.DataTypes);
const Application = require('./backend/src/models/Application')(sequelize, Sequelize.DataTypes);
const Sector = require('./backend/src/models/Sector')(sequelize, Sequelize.DataTypes);

// Model ili≈ükilerini kur
User.hasMany(Application, { foreignKey: 'userId', as: 'applications' });
Application.belongsTo(User, { foreignKey: 'userId', as: 'user' });
Application.belongsTo(User, { foreignKey: 'assignedConsultantId', as: 'assignedConsultant' });
User.belongsTo(Sector, { foreignKey: 'sectorId', as: 'sector' });

async function checkUserApplications() {
  try {
    console.log('üîç kullanici@test.com kullanƒ±cƒ±sƒ±nƒ±n ba≈üvurularƒ± kontrol ediliyor...\n');

    // 1. Kullanƒ±cƒ±yƒ± bul
    const user = await User.findOne({
      where: { email: 'kullanici@test.com' },
      include: [
        {
          model: Sector,
          as: 'sector',
          attributes: ['id', 'name']
        }
      ]
    });

    if (!user) {
      console.log('‚ùå kullanici@test.com bulunamadƒ±');
      return;
    }

    console.log(`‚úÖ Kullanƒ±cƒ± bulundu: ${user.firstName} ${user.lastName}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Sekt√∂r: ${user.sector ? user.sector.name : 'Belirtilmemi≈ü'} (ID: ${user.sectorId})`);
    console.log(`   Rol: ${user.role}\n`);

    // 2. Kullanƒ±cƒ±nƒ±n t√ºm ba≈üvurularƒ±nƒ± getir
    const applications = await Application.findAll({
      where: { userId: user.id },
      include: [
        {
          model: User,
          as: 'assignedConsultant',
          attributes: ['id', 'firstName', 'lastName', 'email'],
          include: [
            {
              model: Sector,
              as: 'sector',
              attributes: ['id', 'name']
            }
          ]
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    console.log(`üìä Toplam ba≈üvuru sayƒ±sƒ±: ${applications.length}\n`);

    if (applications.length === 0) {
      console.log('‚ÑπÔ∏è Bu kullanƒ±cƒ±nƒ±n hi√ß ba≈üvurusu yok.');
      return;
    }

    // 3. Ba≈üvurularƒ± listele
    let assignedCount = 0;
    let unassignedCount = 0;

    applications.forEach((app, index) => {
      console.log(`${index + 1}. BA≈ûVURU (ID: ${app.id})`);
      console.log(`   üìÖ Olu≈üturulma: ${new Date(app.createdAt).toLocaleString('tr-TR')}`);
      console.log(`   üìã Proje: ${app.projectTitle || 'Belirtilmemi≈ü'}`);
      console.log(`   üí∞ Talep Edilen Tutar: ${app.requestedAmount ? app.requestedAmount.toLocaleString('tr-TR') + ' TL' : 'Belirtilmemi≈ü'}`);
      console.log(`   üìä Durum: ${app.status}`);
      
      if (app.assignedConsultant) {
        console.log(`   ‚úÖ Atanan Danƒ±≈üman: ${app.assignedConsultant.firstName} ${app.assignedConsultant.lastName}`);
        console.log(`   üìß Danƒ±≈üman Email: ${app.assignedConsultant.email}`);
        console.log(`   üéØ Danƒ±≈üman Sekt√∂r√º: ${app.assignedConsultant.sector ? app.assignedConsultant.sector.name : 'Belirtilmemi≈ü'}`);
        console.log(`   üìÖ Atama Tarihi: ${app.consultantAssignedAt ? new Date(app.consultantAssignedAt).toLocaleString('tr-TR') : 'Belirtilmemi≈ü'}`);
        assignedCount++;
      } else {
        console.log(`   ‚ùå Danƒ±≈üman: ATANMAMI≈û`);
        unassignedCount++;
      }
      console.log('   ' + '-'.repeat(60));
    });

    // 4. √ñzet
    console.log(`\n=== √ñZET ===`);
    console.log(`‚úÖ Danƒ±≈üman atanmƒ±≈ü ba≈üvuru: ${assignedCount}`);
    console.log(`‚ùå Danƒ±≈üman atanmamƒ±≈ü ba≈üvuru: ${unassignedCount}`);
    console.log(`üìä Atama oranƒ±: ${applications.length > 0 ? ((assignedCount / applications.length) * 100).toFixed(1) : 0}%`);

    // 5. Danƒ±≈üman atanmamƒ±≈ü ba≈üvurularƒ± ayrƒ±ca listele
    if (unassignedCount > 0) {
      console.log(`\nüî¥ DANI≈ûMAN ATANMAMI≈û BA≈ûVURULAR:`);
      const unassignedApps = applications.filter(app => !app.assignedConsultant);
      unassignedApps.forEach((app, index) => {
        console.log(`   ${index + 1}. ${app.id} - ${app.projectTitle || 'Proje adƒ± yok'} (${app.status})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Hata:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
  } finally {
    await sequelize.close();
  }
}

checkUserApplications();