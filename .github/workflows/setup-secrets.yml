name: Verify Secrets Setup

on:
  workflow_dispatch:
    inputs:
      check-production:
        description: 'Check production secrets'
        required: false
        default: true
        type: boolean
      check-staging:
        description: 'Check staging secrets'
        required: false
        default: false
        type: boolean

jobs:
  verify-secrets:
    runs-on: ubuntu-latest
    name: Verify Secrets Configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        echo "🔍 Verifying secrets configuration..."
        
        # Function to check if secret exists
        check_secret() {
          local secret_name=$1
          local secret_value=$2
          
          if [ -n "$secret_value" ]; then
            echo "✅ $secret_name: Configured"
            return 0
          else
            echo "❌ $secret_name: Missing"
            return 1
          fi
        }
        
        # Check GitHub token (should always be available)
        check_secret "GITHUB_TOKEN" "${{ secrets.GITHUB_TOKEN }}"
        
        # Track missing secrets
        missing_secrets=0
        
        echo ""
        echo "📋 Repository Secrets Status:"
        
        # Production secrets
        if [ "${{ inputs.check-production }}" = "true" ]; then
          echo ""
          echo "🏭 Production Secrets:"
          
          check_secret "DEPLOY_SSH_KEY" "${{ secrets.DEPLOY_SSH_KEY }}" || ((missing_secrets++))
          check_secret "DEPLOY_HOST" "${{ secrets.DEPLOY_HOST }}" || ((missing_secrets++))
          check_secret "DEPLOY_USER" "${{ secrets.DEPLOY_USER }}" || ((missing_secrets++))
          check_secret "DEPLOY_PATH" "${{ secrets.DEPLOY_PATH }}" || ((missing_secrets++))
          check_secret "DEPLOY_URL" "${{ secrets.DEPLOY_URL }}" || ((missing_secrets++))
        fi
        
        # Staging secrets
        if [ "${{ inputs.check-staging }}" = "true" ]; then
          echo ""
          echo "🎭 Staging Secrets:"
          
          check_secret "STAGING_SSH_KEY" "${{ secrets.STAGING_SSH_KEY }}" || echo "⚠️ STAGING_SSH_KEY: Optional"
          check_secret "STAGING_HOST" "${{ secrets.STAGING_HOST }}" || echo "⚠️ STAGING_HOST: Optional"
          check_secret "STAGING_USER" "${{ secrets.STAGING_USER }}" || echo "⚠️ STAGING_USER: Optional"
          check_secret "STAGING_PATH" "${{ secrets.STAGING_PATH }}" || echo "⚠️ STAGING_PATH: Optional"
          check_secret "STAGING_URL" "${{ secrets.STAGING_URL }}" || echo "⚠️ STAGING_URL: Optional"
        fi
        
        echo ""
        echo "📊 Summary:"
        if [ $missing_secrets -eq 0 ]; then
          echo "✅ All required secrets are configured!"
        else
          echo "❌ $missing_secrets required secret(s) missing"
          echo ""
          echo "📖 Please check .github/SECRETS.md for setup instructions"
          exit 1
        fi

  test-ssh-connection:
    runs-on: ubuntu-latest
    name: Test SSH Connection
    needs: [verify-secrets]
    if: ${{ inputs.check-production && secrets.DEPLOY_SSH_KEY != '' }}
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Test SSH connection
      run: |
        echo "🔌 Testing SSH connection to production server..."
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        if ssh -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"; then
          echo "✅ SSH connection to production server successful"
        else
          echo "❌ SSH connection to production server failed"
          echo "Please check:"
          echo "  - SSH key is correct"
          echo "  - Server is accessible"
          echo "  - User has proper permissions"
          exit 1
        fi

    - name: Test deployment directory
      run: |
        echo "📁 Testing deployment directory access..."
        
        if ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "test -d ${{ secrets.DEPLOY_PATH }}"; then
          echo "✅ Deployment directory exists: ${{ secrets.DEPLOY_PATH }}"
        else
          echo "⚠️ Deployment directory does not exist: ${{ secrets.DEPLOY_PATH }}"
          echo "Creating deployment directory..."
          
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "sudo mkdir -p ${{ secrets.DEPLOY_PATH }} && sudo chown \$USER:\$USER ${{ secrets.DEPLOY_PATH }}"
          
          if ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "test -d ${{ secrets.DEPLOY_PATH }}"; then
            echo "✅ Deployment directory created successfully"
          else
            echo "❌ Failed to create deployment directory"
            exit 1
          fi
        fi

    - name: Test Docker availability
      run: |
        echo "🐳 Testing Docker availability on server..."
        
        if ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker --version"; then
          echo "✅ Docker is available"
        else
          echo "❌ Docker is not available or not accessible"
          echo "Please install Docker or add user to docker group"
          exit 1
        fi
        
        if ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "docker-compose --version"; then
          echo "✅ Docker Compose is available"
        else
          echo "❌ Docker Compose is not available"
          echo "Please install Docker Compose"
          exit 1
        fi

  test-application-url:
    runs-on: ubuntu-latest
    name: Test Application URL
    needs: [verify-secrets]
    if: ${{ secrets.DEPLOY_URL != '' }}
    
    steps:
    - name: Test application URL accessibility
      run: |
        echo "🌐 Testing application URL accessibility..."
        
        # Test if URL is reachable
        if curl -f -s --connect-timeout 10 "${{ secrets.DEPLOY_URL }}" > /dev/null; then
          echo "✅ Application URL is accessible: ${{ secrets.DEPLOY_URL }}"
        else
          echo "⚠️ Application URL is not accessible: ${{ secrets.DEPLOY_URL }}"
          echo "This is normal if the application is not deployed yet"
        fi
        
        # Test API health endpoint (if exists)
        if curl -f -s --connect-timeout 10 "${{ secrets.DEPLOY_URL }}/api/health" > /dev/null; then
          echo "✅ API health endpoint is accessible"
        else
          echo "⚠️ API health endpoint is not accessible"
          echo "This is normal if the application is not deployed yet"
        fi

  generate-setup-report:
    runs-on: ubuntu-latest
    name: Generate Setup Report
    needs: [verify-secrets, test-ssh-connection, test-application-url]
    if: always()
    
    steps:
    - name: Generate setup report
      run: |
        echo "## 🔧 GitHub Actions Setup Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Generated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Secrets Verification:** ${{ needs.verify-secrets.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SSH Connection Test:** ${{ needs.test-ssh-connection.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL Accessibility Test:** ${{ needs.test-application-url.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.verify-secrets.result }}" = "success" ]; then
          echo "### ✅ Setup Status: Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your GitHub Actions CI/CD pipeline is properly configured!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Push code to \`main\` branch to trigger production deployment" >> $GITHUB_STEP_SUMMARY
          echo "2. Push code to \`develop\` branch to trigger staging deployment" >> $GITHUB_STEP_SUMMARY
          echo "3. Create a release tag (e.g., \`v1.0.0\`) to trigger release workflow" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Setup Status: Incomplete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please complete the missing configuration:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the job logs above for missing secrets" >> $GITHUB_STEP_SUMMARY
          echo "2. Review \`.github/SECRETS.md\` for setup instructions" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure missing secrets in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run this workflow to verify the setup" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- [Secrets Setup Guide](.github/SECRETS.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Deployment Guide](DEPLOYMENT.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Production README](README-PRODUCTION.md)" >> $GITHUB_STEP_SUMMARY