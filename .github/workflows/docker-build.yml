name: Docker Build and Push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (development, staging, production)'
      tag:
        required: false
        type: string
        default: 'latest'
        description: 'Docker image tag'
      push-images:
        required: false
        type: boolean
        default: true
        description: 'Whether to push images to registry'
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        description: 'Target environment'
      tag:
        required: false
        type: string
        default: 'latest'
        description: 'Docker image tag'
      push-images:
        required: false
        type: boolean
        default: true
        description: 'Push images to registry'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    name: Build Backend Image
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: ${{ inputs.push-images }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME || github.actor }}
        password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=raw,value=${{ inputs.tag }}
          type=raw,value=${{ inputs.environment }}-${{ inputs.tag }}
          type=sha,prefix=${{ inputs.environment }}-
          type=ref,event=branch,prefix=${{ inputs.environment }}-
          type=ref,event=pr,prefix=${{ inputs.environment }}-pr-

    - name: Build and push backend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ inputs.push-images }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=backend-${{ inputs.environment }}
        cache-to: type=gha,mode=max,scope=backend-${{ inputs.environment }}
        build-args: |
          NODE_ENV=${{ inputs.environment }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: Generate SBOM for backend
      if: ${{ inputs.push-images }}
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ inputs.tag }}
        format: spdx-json
        output-file: backend-sbom.spdx.json

    - name: Upload backend SBOM
      if: ${{ inputs.push-images }}
      uses: actions/upload-artifact@v4
      with:
        name: backend-sbom-${{ inputs.environment }}
        path: backend-sbom.spdx.json

  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend Image
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: ${{ inputs.push-images }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME || github.actor }}
        password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=raw,value=${{ inputs.tag }}
          type=raw,value=${{ inputs.environment }}-${{ inputs.tag }}
          type=sha,prefix=${{ inputs.environment }}-
          type=ref,event=branch,prefix=${{ inputs.environment }}-
          type=ref,event=pr,prefix=${{ inputs.environment }}-pr-

    - name: Build and push frontend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ inputs.push-images }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=frontend-${{ inputs.environment }}
        cache-to: type=gha,mode=max,scope=frontend-${{ inputs.environment }}
        build-args: |
          NODE_ENV=${{ inputs.environment }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: Generate SBOM for frontend
      if: ${{ inputs.push-images }}
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ inputs.tag }}
        format: spdx-json
        output-file: frontend-sbom.spdx.json

    - name: Upload frontend SBOM
      if: ${{ inputs.push-images }}
      uses: actions/upload-artifact@v4
      with:
        name: frontend-sbom-${{ inputs.environment }}
        path: frontend-sbom.spdx.json

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan Images
    needs: [build-backend, build-frontend]
    if: ${{ inputs.push-images }}
    
    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ inputs.tag }}
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.component }}-results.sarif'
        category: 'trivy-${{ matrix.component }}'

  image-signing:
    runs-on: ubuntu-latest
    name: Sign Images
    needs: [build-backend, build-frontend, security-scan]
    if: ${{ inputs.push-images && inputs.environment == 'production' }}
    
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign backend image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ inputs.tag }}

    - name: Sign frontend image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ inputs.tag }}

  update-deployment-manifest:
    runs-on: ubuntu-latest
    name: Update Deployment Manifest
    needs: [build-backend, build-frontend]
    if: ${{ inputs.environment != 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update docker-compose file
      run: |
        # Update the appropriate docker-compose file based on environment
        if [ "${{ inputs.environment }}" = "staging" ]; then
          COMPOSE_FILE="docker-compose.staging.yml"
        else
          COMPOSE_FILE="docker-compose.yml"
        fi
        
        # Update image tags in docker-compose file
        sed -i "s|ghcr.io/${{ github.repository }}/backend:.*|ghcr.io/${{ github.repository }}/backend:${{ inputs.tag }}|g" $COMPOSE_FILE
        sed -i "s|ghcr.io/${{ github.repository }}/frontend:.*|ghcr.io/${{ github.repository }}/frontend:${{ inputs.tag }}|g" $COMPOSE_FILE

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "chore: update ${{ inputs.environment }} images to ${{ inputs.tag }}"
        git push