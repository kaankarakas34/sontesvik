name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        description: 'Target environment'
      tag:
        required: false
        type: string
        default: 'latest'
        description: 'Docker image tag'
      push-images:
        required: false
        type: boolean
        default: false
        description: 'Push images to registry'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    name: Build Backend Image
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: ${{ github.event.inputs.push-images == 'true' || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=raw,value=latest
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build backend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event.inputs.push-images == 'true' || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend Image
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: ${{ github.event.inputs.push-images == 'true' || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=raw,value=latest
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build frontend image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event.inputs.push-images == 'true' || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan Images
    needs: [build-backend, build-frontend]
    if: ${{ github.event.inputs.push-images == 'true' || github.event_name == 'push' }}
    
    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:latest
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.component }}-results.sarif'
        category: 'trivy-${{ matrix.component }}'

  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs: [build-backend, build-frontend]
    if: always()

    steps:
    - name: Build Complete
      run: |
        echo "ðŸŽ‰ Docker Build Completed Successfully!"
        echo "Backend Image: ${{ needs.build-backend.outputs.image-tags }}"
        echo "Frontend Image: ${{ needs.build-frontend.outputs.image-tags }}"
        echo "Build Status: âœ… Success"