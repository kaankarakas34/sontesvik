const { ApplicationRoom, Application, User, ApplicationMessage, Document } = require('../models');
const ConsultantAssignmentService = require('./consultantAssignmentService');
const { Op } = require('sequelize');

class ApplicationRoomService {
  /**
   * Ba≈üvuru olu≈üturulduƒüunda otomatik room olu≈ütur ve danƒ±≈üman ata
   */
  static async createRoomForApplication(applicationId, userId) {
    const transaction = await ApplicationRoom.sequelize.transaction();
    
    try {
      console.log(`üè† Room olu≈üturuluyor - Ba≈üvuru: ${applicationId}, Kullanƒ±cƒ±: ${userId}`);

      // Ba≈üvuru bilgilerini al
      const application = await Application.findByPk(applicationId, {
        include: [
          {
            model: User,
            as: 'user',
            attributes: ['id', 'firstName', 'lastName', 'sectorId', 'companyName']
          }
        ]
      });

      if (!application) {
        throw new Error('Ba≈üvuru bulunamadƒ±');
      }

      // Room adƒ±nƒ± olu≈ütur
      const roomName = `${application.user.companyName || '≈ûirket'} - Ba≈üvuru #${application.id}`;
      const roomDescription = `${application.user.firstName} ${application.user.lastName} tarafƒ±ndan olu≈üturulan ba≈üvuru odasƒ±`;

      // Room'u olu≈ütur
      const room = await ApplicationRoom.create({
        applicationId: applicationId,
        roomName: roomName,
        roomDescription: roomDescription,
        status: 'active',
        priority: 'medium',
        lastActivityAt: new Date(),
        consultantNotes: '',
        settings: {
          allowFileUpload: true,
          allowMessaging: true,
          autoNotifications: true,
          maxFileSize: 10485760, // 10MB
          allowedFileTypes: ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'xlsx', 'xls']
        },
        stats: {
          messageCount: 0,
          documentCount: 0,
          lastMessageAt: null,
          consultantResponseTime: null
        }
      }, { transaction });

      // Danƒ±≈üman atamasƒ± yap
      let assignmentResult = null;
      if (application.user.sectorId) {
        assignmentResult = await ConsultantAssignmentService.autoAssignConsultant(
          applicationId,
          application.user.sectorId
        );

        if (assignmentResult.success) {
          // Room priority'sini g√ºncelle - yeni atama yapƒ±ldƒ±ƒüƒ±nda √∂nceliƒüi artƒ±r
          await room.update({
            priority: 'urgent',
            consultantNotes: `Danƒ±≈üman otomatik atandƒ±: ${assignmentResult.consultantName}`
          }, { transaction });

          console.log(`‚úÖ Room olu≈üturuldu ve danƒ±≈üman atandƒ± - Room: ${room.id}, Danƒ±≈üman: ${assignmentResult.consultantName}`);
        } else {
          console.log(`‚ö†Ô∏è Room olu≈üturuldu ancak danƒ±≈üman atanamadƒ± - Room: ${room.id}`);
        }
      }

      // Ho≈ü geldin mesajƒ± g√∂nder
      await this.sendWelcomeMessage(room.id, application.user, assignmentResult, transaction);

      await transaction.commit();

      return {
        success: true,
        room: room,
        assignment: assignmentResult,
        message: assignmentResult?.success ? 
          'Room olu≈üturuldu ve danƒ±≈üman atandƒ±' : 
          'Room olu≈üturuldu, danƒ±≈üman atamasƒ± bekleniyor'
      };

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Room olu≈üturma hatasƒ±:', error);
      throw error;
    }
  }

  /**
   * Ho≈ü geldin mesajƒ± g√∂nder
   */
  static async sendWelcomeMessage(roomId, user, assignmentResult, transaction) {
    try {
      const room = await ApplicationRoom.findByPk(roomId);
      
      let welcomeMessage = `Merhaba ${user.firstName} ${user.lastName},\n\n`;
      welcomeMessage += `Ba≈üvuru odanƒ±z ba≈üarƒ±yla olu≈üturuldu. Bu oda √ºzerinden:\n`;
      welcomeMessage += `‚Ä¢ Belgelerinizi y√ºkleyebilirsiniz\n`;
      welcomeMessage += `‚Ä¢ Danƒ±≈ümanƒ±nƒ±zla ileti≈üim kurabilirsiniz\n`;
      welcomeMessage += `‚Ä¢ Ba≈üvuru s√ºrecinizi takip edebilirsiniz\n\n`;

      if (assignmentResult?.success) {
        welcomeMessage += `Danƒ±≈ümanƒ±nƒ±z: ${assignmentResult.consultantName}\n`;
        welcomeMessage += `Danƒ±≈ümanƒ±nƒ±z en kƒ±sa s√ºrede sizinle ileti≈üime ge√ßecektir.\n\n`;
      } else {
        welcomeMessage += `Danƒ±≈üman atamasƒ± yapƒ±lmaktadƒ±r. Atama tamamlandƒ±ƒüƒ±nda bilgilendirileceksiniz.\n\n`;
      }

      welcomeMessage += `ƒ∞yi √ßalƒ±≈ümalar dileriz!`;

      // Sistem mesajƒ± olarak kaydet
      await ApplicationMessage.create({
        applicationId: room.applicationId,
        senderId: null, // Sistem mesajƒ±
        receiverId: user.id,
        subject: 'Ho≈ü Geldiniz - Ba≈üvuru Odanƒ±z Hazƒ±r',
        message: welcomeMessage,
        messageType: 'system',
        priority: 'normal',
        status: 'sent',
        isRead: false
      }, { transaction });

      // Room stats g√ºncelle
      await room.update({
        stats: {
          ...room.stats,
          messageCount: 1,
          lastMessageAt: new Date()
        },
        lastActivityAt: new Date()
      }, { transaction });

    } catch (error) {
      console.error('‚ùå Ho≈ü geldin mesajƒ± g√∂nderme hatasƒ±:', error);
      // Bu hata room olu≈üturmayƒ± engellemez
    }
  }

  /**
   * Room'a danƒ±≈üman atandƒ±ƒüƒ±nda priority g√ºncelle
   */
  static async updateRoomOnConsultantAssignment(applicationId, consultantId, consultantName) {
    try {
      const room = await ApplicationRoom.findOne({
        where: { applicationId }
      });

      if (room) {
        await room.update({
          priority: 'urgent',
          consultantNotes: room.consultantNotes + 
            `\n[${new Date().toLocaleString('tr-TR')}] Danƒ±≈üman atandƒ±: ${consultantName}`,
          lastActivityAt: new Date()
        });

        console.log(`üî• Room priority URGENT yapƒ±ldƒ± - Danƒ±≈üman atama nedeniyle: ${consultantName}`);
      }
    } catch (error) {
      console.error('‚ùå Room g√ºncelleme hatasƒ±:', error);
    }
  }

  /**
   * Room'da yeni mesaj geldiƒüinde priority ve stats g√ºncelle
   */
  static async updateRoomOnNewMessage(applicationId, messageType = 'user') {
    try {
      const room = await ApplicationRoom.findOne({
        where: { applicationId }
      });

      if (room) {
        const currentStats = room.stats || {};
        
        // Kullanƒ±cƒ±dan gelen mesajsa √∂nceliƒüi artƒ±r
        const newPriority = messageType === 'user' ? 'urgent' : room.priority;
        
        await room.update({
          priority: newPriority,
          stats: {
            ...currentStats,
            messageCount: (currentStats.messageCount || 0) + 1,
            lastMessageAt: new Date()
          },
          lastActivityAt: new Date()
        });

        if (messageType === 'user') {
          console.log(`üî• Room priority URGENT yapƒ±ldƒ± - Yeni kullanƒ±cƒ± mesajƒ± nedeniyle`);
        }
      }
    } catch (error) {
      console.error('‚ùå Room mesaj g√ºncelleme hatasƒ±:', error);
    }
  }

  /**
   * Room'da yeni belge y√ºklendiƒüinde stats g√ºncelle
   */
  static async updateRoomOnNewDocument(roomId, userId) {
    try {
      const room = await ApplicationRoom.findByPk(roomId);

      if (room) {
        const currentStats = room.stats || {};
        const user = await User.findByPk(userId);
        
        // Kullanƒ±cƒ± t√ºr√ºne g√∂re aktivite g√ºncelle
        const activityUpdate = {};
        if (user.role === 'company') {
          activityUpdate.lastUserActivity = new Date();
        } else if (user.role === 'consultant') {
          activityUpdate.lastConsultantActivity = new Date();
        }
        
        await room.update({
          priority: 'urgent', // Yeni belge y√ºklendiƒüinde √∂nceliƒüi artƒ±r
          stats: {
            ...currentStats,
            totalDocuments: (currentStats.totalDocuments || 0) + 1,
            ...activityUpdate
          },
          lastActivityAt: new Date()
        });

        console.log(`üî• Room priority URGENT yapƒ±ldƒ± - Yeni belge y√ºkleme nedeniyle (${user.role})`);
        
        // Belge y√ºkleme sonrasƒ± room durumunu g√ºncelle
        if (user.role === 'company' && room.status === 'waiting_documents') {
          await room.update({ status: 'under_review' });
          console.log(`üìã Room durumu 'under_review' olarak g√ºncellendi`);
        }
      }
    } catch (error) {
      console.error('‚ùå Room belge g√ºncelleme hatasƒ±:', error);
    }
  }

  /**
   * Room priority'sini manuel g√ºncelle
   */
  static async updateRoomPriority(roomId, priority, consultantId, reason = '') {
    try {
      const room = await ApplicationRoom.findByPk(roomId);
      
      if (!room) {
        throw new Error('Room bulunamadƒ±');
      }

      const consultant = await User.findByPk(consultantId);
      const consultantName = consultant ? `${consultant.firstName} ${consultant.lastName}` : 'Bilinmeyen';

      const noteEntry = `\n[${new Date().toLocaleString('tr-TR')}] Priority ${room.priority} -> ${priority} (${consultantName}): ${reason}`;

      await room.update({
        priority: priority,
        consultantNotes: room.consultantNotes + noteEntry,
        lastActivityAt: new Date()
      });

      return {
        success: true,
        message: 'Room priority ba≈üarƒ±yla g√ºncellendi'
      };

    } catch (error) {
      console.error('‚ùå Room priority g√ºncelleme hatasƒ±:', error);
      return {
        success: false,
        message: 'Priority g√ºncellenemedi',
        error: error.message
      };
    }
  }

  /**
   * Ba≈üvuru durumu deƒüi≈ütiƒüinde room durumunu g√ºncelle
   */
  static async updateRoomOnApplicationStatusChange(applicationId, newStatus, consultantId = null) {
    try {
      const room = await ApplicationRoom.findOne({
        where: { applicationId }
      });

      if (!room) {
        console.log(`Room not found for application ${applicationId}`);
        return null;
      }

      // Application status'una g√∂re room status'unu belirle
      let roomStatus = room.status;
      let priority = room.priority;

      switch (newStatus) {
        case 'submitted':
          roomStatus = 'waiting_documents';
          priority = 'medium';
          break;
        case 'under_review':
          roomStatus = 'under_review';
          priority = 'high';
          break;
        case 'additional_info_required':
          roomStatus = 'additional_info_required';
          priority = 'urgent';
          break;
        case 'approved':
          roomStatus = 'approved';
          priority = 'low';
          break;
        case 'rejected':
          roomStatus = 'rejected';
          priority = 'low';
          break;
        case 'completed':
          roomStatus = 'completed';
          priority = 'low';
          break;
        case 'cancelled':
          roomStatus = 'archived';
          priority = 'low';
          break;
      }

      // Room'u g√ºncelle
      await room.update({
        status: roomStatus,
        priority: priority,
        lastActivityAt: new Date(),
        consultantNotes: consultantId ? `Status updated by consultant to ${newStatus}` : room.consultantNotes
      });

      console.log(`Room ${room.id} status updated to ${roomStatus} for application ${applicationId}`);
      return room;

    } catch (error) {
      console.error('Error updating room on application status change:', error);
      throw error;
    }
  }

  /**
   * Danƒ±≈üman i√ßin HOT priority room'larƒ± getir
   */
  static async getHotPriorityRooms(consultantId, limit = 10) {
    try {
      const rooms = await ApplicationRoom.findAll({
        include: [
          {
            model: Application,
            as: 'application',
            where: {
              assignedConsultantId: consultantId
            },
            include: [
              {
                model: User,
                as: 'user',
                attributes: ['id', 'firstName', 'lastName', 'companyName']
              }
            ]
          }
        ],
        where: {
          priority: 'urgent',
          status: 'active'
        },
        order: [['lastActivityAt', 'DESC']],
        limit: limit
      });

      return rooms;

    } catch (error) {
      console.error('HOT priority roomlar getirilirken hata:', error);
      return [];
    }
  }
}

module.exports = ApplicationRoomService;