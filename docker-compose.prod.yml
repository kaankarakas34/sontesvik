version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tesvik360-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-tesvik360}
      POSTGRES_USER: ${DB_USER:-tesvik360_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - tesvik360-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tesvik360_user} -d ${DB_NAME:-tesvik360}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tesvik360-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    networks:
      - tesvik360-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tesvik360-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tesvik360}
      DB_USER: ${DB_USER:-tesvik360_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_123}
      JWT_SECRET: ${JWT_SECRET:jwt_password_123}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:jwt_refresh_password_123}
      CORS_ORIGIN: "*"
      EMAIL_HOST: ${EMAIL_HOST:-mail.kurumsalaposta.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-info@tesvik360.com}
      EMAIL_PASS: ${EMAIL_PASS:-xk=7-Y.Y792-LrMk}
      UPLOAD_PATH: /app/uploads
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - tesvik360-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Web App
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: tesvik360-frontend
    restart: unless-stopped
    networks:
      - tesvik360-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tesvik360-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tesvik360-network
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  tesvik360-network:
    driver: bridge